{"version":3,"sources":["compontents/Todo.tsx","compontents/Todos.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Todo","props","React","task","title","input","setInput","className","isCompleted","Checkbox","checked","onChange","markComplete","color","inputProps","placeholder","name","value","e","editTask","id","searching","currentTarget","onClick","deleteTask","icon","faTimes","Todos","useForm","register","handleSubmit","errors","reset","filterToDos","setFilterToDos","whichFilter","setWhichFilter","todos","setTodos","count","setCount","localStorage","getItem","setItem","notStringTodos","JSON","parse","filter","query","returnedTasks","toLowerCase","includes","forEach","push","tasksToDisplay","notCompletedTodos","todo","length","console","log","markTaskComplete","markTodoCompleted","index","indexOf","isTrueOrFalse","newTodos","stringify","returnedArray","item","stringedReturn","editATask","newTitle","taskId","map","faClipboardList","onSubmit","data","nextID","lastElement","newTask","addATodo","undefined","stringedTasks","addTask","type","ref","required","message","key","PurpleSwitch","withStyles","switchBase","purple","backgroundColor","track","Switch","App","useState","isReturningUser","savedMode","userHasDark","window","matchMedia","matches","getPrefScheme","getMode","darkMode","setDarkMode","setQuery","useEffect","event","target","deletedAllCompleted","prevMode","faMoon","faSun","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.9e347af1.chunk.js","sourcesContent":["import * as React from \"react\";\r\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport TextareaAutosize from \"react-autosize-textarea\";\r\n\r\ninterface task {\r\n  title: string;\r\n  isCompleted: boolean;\r\n  id: number;\r\n}\r\n\r\ninterface Props {\r\n  task: task;\r\n  key: number;\r\n  markComplete: (task: task) => void;\r\n  deleteTask: (task: task) => void;\r\n  editTask: (newTitle: string, taskId: number) => void;\r\n}\r\n\r\nconst Todo: React.FC<Props> = (props: Props) => {\r\n  const [input, setInput] = React.useState(props.task.title);\r\n\r\n  const searching = (e: string) => {\r\n    setInput(e);\r\n    props.editTask(e, props.task.id);\r\n  };\r\n  return (\r\n    <div className=\"withDaTrash\">\r\n      <div\r\n        // onClick={() => props.markComplete(props.task)}\r\n        className={props.task.isCompleted ? \"todoCompleted\" : \"todo\"}\r\n      >\r\n        <div className=\"spacing\">\r\n          <Checkbox\r\n            checked={props.task.isCompleted}\r\n            onChange={() => props.markComplete(props.task)}\r\n            color=\"primary\"\r\n            inputProps={{ \"aria-label\": \"secondary checkbox\" }}\r\n          />\r\n          <TextareaAutosize\r\n            className=\"editTask\"\r\n            placeholder=\"Add a title!\"\r\n            name=\"search\"\r\n            value={input}\r\n            onChange={(e) => searching(e.currentTarget.value)}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"trashIcon\" onClick={() => props.deleteTask(props.task)}>\r\n        <FontAwesomeIcon className=\"trash\" icon={faTimes} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Todo;\r\n","import * as React from \"react\";\r\nimport Todo from \"./Todo\";\r\nimport { useForm } from \"react-hook-form\";\r\n// @ts-ignore\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faClipboardList } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\ninterface task {\r\n  title: string;\r\n  isCompleted: boolean;\r\n  id: number;\r\n}\r\ninterface Props {\r\n  query: string;\r\n  todos: task[];\r\n}\r\ninterface formInput {\r\n  title: string;\r\n}\r\ntype Inputs = {\r\n  title: string;\r\n};\r\n\r\nconst tasksToDisplay = (todos: task[], filter: string, query: string) => {\r\n  var returnedTasks: task[] = [];\r\n  var filteredTasks: task[] = todos.filter((task) => {\r\n    return task.title.toLowerCase().includes(query.toLowerCase());\r\n  });\r\n  filteredTasks.forEach((task: task) => {\r\n    if (filter === \"all\") {\r\n      returnedTasks.push(task);\r\n    } else if (filter === \"completed\" && task.isCompleted) {\r\n      returnedTasks.push(task);\r\n    } else if (filter === \"notCompleted\" && !task.isCompleted) {\r\n      returnedTasks.push(task);\r\n    }\r\n  });\r\n  return returnedTasks;\r\n};\r\n\r\nconst Todos: React.FC<Props> = (props: Props) => {\r\n  const { register, handleSubmit, errors, reset } = useForm<Inputs>();\r\n  const [filterToDos, setFilterToDos] = React.useState([\r\n    { title: \"\", isCompleted: false, id: 0 },\r\n  ]);\r\n  const [whichFilter, setWhichFilter] = React.useState(\"all\");\r\n  const [todos, setTodos] = React.useState([\r\n    { title: \"\", isCompleted: false, id: 0 },\r\n  ]);\r\n  const [count, setCount] = React.useState(0);\r\n\r\n  React.useEffect(() => {\r\n    var todos;\r\n    if (localStorage.getItem(\"todos\")) {\r\n      todos = localStorage.getItem(\"todos\");\r\n    } else {\r\n      localStorage.setItem(\"todos\", \"[]\");\r\n      todos = \"[]\";\r\n    }\r\n    var notStringTodos = JSON.parse(todos || \"\");\r\n    if (todos !== null) {\r\n      setTodos(notStringTodos);\r\n    }\r\n  }, [props.todos]);\r\n\r\n  React.useEffect(() => {\r\n    setFilterToDos(tasksToDisplay(todos, whichFilter, props.query));\r\n  }, [todos, whichFilter, props.query]);\r\n\r\n  React.useEffect(() => {\r\n    const notCompletedTodos = todos.filter(\r\n      (todo) => todo.isCompleted === false\r\n    );\r\n    setCount(notCompletedTodos.length);\r\n    console.log(todos);\r\n  }, [todos]);\r\n\r\n  const completed = () => {\r\n    setWhichFilter(\"completed\");\r\n  };\r\n\r\n  const notCompleted = () => {\r\n    setWhichFilter(\"notCompleted\");\r\n  };\r\n\r\n  const all = () => {\r\n    setWhichFilter(\"all\");\r\n  };\r\n\r\n  const addTask = (task: task) => {\r\n    var addATodo: task[] = JSON.parse(localStorage.getItem(\"todos\") || \"\");\r\n    addATodo.push(task);\r\n    if (todos !== undefined) {\r\n      setTodos(addATodo);\r\n    }\r\n    var stringedTasks = JSON.stringify(addATodo);\r\n    localStorage.setItem(\"todos\", stringedTasks);\r\n  };\r\n\r\n  const markTaskComplete = (task: task) => {\r\n    var markTodoCompleted: task[] = JSON.parse(\r\n      localStorage.getItem(\"todos\") || \"\"\r\n    );\r\n    var index = todos.indexOf(task);\r\n    const isTrueOrFalse = markTodoCompleted[index].isCompleted;\r\n    markTodoCompleted[index] = {\r\n      ...markTodoCompleted[index],\r\n      isCompleted: !isTrueOrFalse,\r\n    };\r\n    setTodos(markTodoCompleted);\r\n    const newTodos = JSON.stringify(markTodoCompleted);\r\n    localStorage.setItem(\"todos\", newTodos);\r\n  };\r\n\r\n  const deleteTask = (task: task) => {\r\n    var deleteTask: task[] = JSON.parse(localStorage.getItem(\"todos\") || \"\");\r\n    var returnedArray = deleteTask.filter((item) => item.id !== task.id);\r\n    setTodos(returnedArray);\r\n    const stringedReturn = JSON.stringify(returnedArray);\r\n    localStorage.setItem(\"todos\", stringedReturn);\r\n  };\r\n\r\n  const editATask = (newTitle: string, taskId: number) => {\r\n    var updatedTitle: task[] = JSON.parse(localStorage.getItem(\"todos\") || \"\");\r\n    var returnedArray = updatedTitle.map((task) => {\r\n      if (task.id === taskId) {\r\n        task.title = newTitle;\r\n        return task;\r\n      } else {\r\n        return task;\r\n      }\r\n    });\r\n    setTodos(returnedArray);\r\n    const stringedReturn = JSON.stringify(returnedArray);\r\n    localStorage.setItem(\"todos\", stringedReturn);\r\n  };\r\n\r\n  const onSubmit = (data: formInput) => {\r\n    var nextID;\r\n    const lastElement = todos.length;\r\n    lastElement === 0 ? (nextID = 1) : (nextID = todos[lastElement - 1].id + 1);\r\n\r\n    const newTask: task = {\r\n      title: data.title,\r\n      isCompleted: false,\r\n      id: nextID,\r\n    };\r\n    console.log(newTask);\r\n    addTask(newTask);\r\n    reset();\r\n  };\r\n\r\n  return (\r\n    <div className=\"wholetodo\">\r\n      <div className=\"topOfTodos\">\r\n        <h1>\r\n          Pleseant Todos <FontAwesomeIcon icon={faClipboardList} />\r\n        </h1>\r\n        <div className=\"topFormatting\">\r\n          <p>making all your tasks easily accessible </p>\r\n        </div>\r\n        <div>\r\n          <form className=\"form\" onSubmit={handleSubmit(onSubmit)}>\r\n            <div className=\"formatForm\">\r\n              <div className=\"inputAndError\">\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"Title\"\r\n                  name=\"title\"\r\n                  className=\"topInput\"\r\n                  ref={register({\r\n                    required: \"Required\",\r\n                  })}\r\n                />\r\n                <div className=\"redtext\">\r\n                  {errors.title && errors.title.message}\r\n                </div>\r\n              </div>\r\n              <input type=\"submit\" className=\"topButton\" placeholder=\"Submit\" />\r\n            </div>\r\n          </form>\r\n        </div>\r\n        <div className=\"allTodos\">\r\n          {filterToDos &&\r\n            filterToDos.map((task) => {\r\n              return (\r\n                <Todo\r\n                  task={task}\r\n                  key={task.id}\r\n                  markComplete={markTaskComplete}\r\n                  deleteTask={deleteTask}\r\n                  editTask={editATask}\r\n                />\r\n              );\r\n            })}\r\n          <p className=\"todo-count\">\r\n            <strong>{count}</strong> {count === 1 ? \"item\" : \"items\"} left\r\n          </p>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"buttonFlexing\">\r\n        <button\r\n          className={\r\n            whichFilter === \"completed\"\r\n              ? \"bottomButtonComplete\"\r\n              : \"bottomButton\"\r\n          }\r\n          onClick={completed}\r\n        >\r\n          Completed\r\n        </button>\r\n        <button\r\n          className={\r\n            whichFilter === \"notCompleted\"\r\n              ? \"bottomButtonComplete\"\r\n              : \"bottomButton\"\r\n          }\r\n          onClick={notCompleted}\r\n        >\r\n          Not Completed\r\n        </button>\r\n        <button\r\n          className={\r\n            whichFilter === \"all\" ? \"bottomButtonComplete\" : \"bottomButton\"\r\n          }\r\n          onClick={all}\r\n        >\r\n          All\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Todos;\r\n","import React, { useState, useEffect } from \"react\";\nimport Todos from \"./compontents/Todos\";\nimport \"./App.scss\";\nimport Switch from \"@material-ui/core/Switch\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport { purple } from \"@material-ui/core/colors\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faMoon } from \"@fortawesome/free-solid-svg-icons\";\nimport { faSun } from \"@fortawesome/free-solid-svg-icons\";\n\ninterface task {\n  title: string;\n  isCompleted: boolean;\n  id: number;\n}\nconst PurpleSwitch = withStyles({\n  switchBase: {\n    color: purple[300],\n    \"&$checked\": {\n      color: purple[500],\n    },\n    \"&$checked + $track\": {\n      color: purple[500],\n      backgroundColor: purple[500],\n    },\n  },\n  checked: {},\n  track: {},\n})(Switch);\n\nfunction App() {\n  const [darkMode, setDarkMode] = useState(getMode());\n  const [query, setQuery] = useState(\"\");\n  const [todos, setTodos] = React.useState([\n    { title: \"\", isCompleted: false, id: 0 },\n  ]);\n  function getMode() {\n    var isReturningUser: boolean | string;\n    var savedMode: boolean;\n    if (\n      localStorage.getItem(\"darkMode\") === \"true\" ||\n      localStorage.getItem(\"darkMode\") === \"false\"\n    ) {\n      isReturningUser = \"darkMode\" in localStorage;\n      savedMode = JSON.parse(localStorage.getItem(\"darkMode\") || \"\");\n    } else {\n      isReturningUser = \"none\";\n      savedMode = false;\n    }\n    const userHasDark = getPrefScheme();\n    if (isReturningUser !== \"none\") {\n      return savedMode;\n    } else if (userHasDark) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  const searching = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value);\n  };\n\n  const deletedAllCompleted = () => {\n    var deleteCompletedTasks: task[] = JSON.parse(\n      localStorage.getItem(\"todos\") || \"\"\n    );\n    var returnedArray = deleteCompletedTasks.filter(\n      (item) => item.isCompleted === false\n    );\n    setTodos(returnedArray);\n    const stringedReturn = JSON.stringify(returnedArray);\n    localStorage.setItem(\"todos\", stringedReturn);\n  };\n\n  useEffect(() => {\n    localStorage.setItem(\"darkMode\", JSON.stringify(darkMode));\n  }, [darkMode]);\n\n  function getPrefScheme() {\n    if (!window.matchMedia) return;\n    console.log(window.matchMedia(\"prefers-color-scheme: dark\").matches);\n    return window.matchMedia(\"prefers-color-scheme: dark\").matches;\n  }\n  return (\n    <div className=\"App\">\n      <div className={darkMode ? \"dark-mode\" : \"light-mode\"}>\n        <div className=\"toggle\">\n          <div className=\"formAndClear\">\n            <input\n              type=\"text\"\n              className=\"bottomInput\"\n              placeholder=\"Search through todos\"\n              name=\"search\"\n              onChange={searching}\n            />\n            <div className=\"toolbar\">\n              <button\n                className=\"clearButton\"\n                onClick={() => deletedAllCompleted()}\n              >\n                Clear Completed\n              </button>\n            </div>\n          </div>\n          <div>\n            <PurpleSwitch\n              checked={darkMode}\n              onChange={() => setDarkMode((prevMode: boolean) => !prevMode)}\n              name=\"checkedA\"\n              color=\"secondary\"\n            />\n            {darkMode ? (\n              <FontAwesomeIcon color=\"#FEFCD7\" icon={faMoon} />\n            ) : (\n              <FontAwesomeIcon color=\"#FDB813\" icon={faSun} />\n            )}\n          </div>\n        </div>\n\n        <Todos query={query} todos={todos} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}